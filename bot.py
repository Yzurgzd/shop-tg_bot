import logging

from aiogram import Bot, Dispatcher, executor, types
import aiogram.utils.markdown as md
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, message
from aiogram.utils import executor

import sqlite3
import requests
import uuid
import random
import functions
import config
import keyboard
import statesGroup


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ logging
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ dispatcher
bot = Bot(token=config.token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
print("| –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
conn_u = sqlite3.connect('udb.sqlite3')
cursor_u = conn_u.cursor()

try:
    cursor_u.execute(
        '''CREATE TABLE udb (uid text, current_item text, current_price text, current_IDpay text)''')
except:
    pass

conn_a = sqlite3.connect('admin.sqlite3')
cursor_a = conn_a.cursor()

try:
    cursor_a.execute('''CREATE TABLE admin (name text, value text)''')
except:
    pass

conn_b = sqlite3.connect('buttons.sqlite3')
cursor_b = conn_b.cursor()

try:
    cursor_b.execute(
        '''CREATE TABLE buttons (button text, button_text text)''')
except:
    pass

conn_us = sqlite3.connect('users.sqlite3')
cursor_us = conn_us.cursor()

try:
    cursor_us.execute(
        '''CREATE TABLE users (id integer, chat_id integer, username text, sum_pay integer, reg_time integer, referer text)''')
except:
    pass

conn_i = sqlite3.connect('items.sqlite3')
cursor_i = conn_i.cursor()

try:
    cursor_i.execute(
        '''CREATE TABLE items (index_item text, name text, price text, category text, description text)''')
except:
    pass

conn_c = sqlite3.connect('categories.sqlite3')
cursor_c = conn_c.cursor()

try:
    cursor_c.execute(
        '''CREATE TABLE categories (category text)''')
except:
    pass

conn_m = sqlite3.connect('messages.sqlite3')
cursor_m = conn_m.cursor()

try:
    cursor_m.execute('''CREATE TABLE messages(name text, message_text text)''')
except:
    pass

conn_w = sqlite3.connect('wallets.sqlite3')
cursor_w = conn_w.cursor()

try:
    cursor_w.execute('''CREATE TABLE wallets(acc_number text, token text)''')
except:
    pass


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∞–¥–º–∏–Ω—É
async def send_in_group(text):
    if config.group_id != "None":
        await bot.send_message(config.group_id, text)
    else:
        await bot.send_message(config.admin_id, text)


# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start_answer(message):
    try:
        conn_u = sqlite3.connect('udb.sqlite3')
        cursor_u = conn_u.cursor()
        conn_c = sqlite3.connect('categories.sqlite3')
        cursor_c = conn_c.cursor()
        conn_m = sqlite3.connect('messages.sqlite3')
        cursor_m = conn_m.cursor()
        cursor_u.execute("DELETE FROM udb WHERE uid='" +
                         str(message.from_user.id)+"'")
        cursor_u.execute("INSERT INTO udb VALUES ('" +
                         str(message.from_user.id)+"', 'none', 'none', 'none')")
        conn_u.commit()
        start_message_text = cursor_m.execute(
            "SELECT * FROM messages WHERE name='start_message'").fetchall()[0][1]
        keyCat = types.ReplyKeyboardMarkup(True)
        all_categories = cursor_c.execute(
            "SELECT * FROM categories").fetchall()

        users = functions.DataBase()
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä–∞
        if users.search_user(message.chat.id) == False:
            refka = message.text[7:]
            user_from_worker = str(message.from_user.username)

            # –ë–µ–∑ —Ä–µ—Ñ—Ñ–∫–∏
            if refka == "":
                await send_in_group("üë• –ù–æ–≤—ã–π –∞–π–¥–∏ —é–∑–µ—Ä–∞ - @{}".format(user_from_worker))
                users.new_user(message.chat.id, message.from_user.username)

            # –° —Ä–µ—Ñ—Ñ–∫–æ–π
            else:
                await send_in_group("üë• –ù–æ–≤—ã–π —é–∑–µ—Ä –æ—Ç —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ @{}, –∞–π–¥–∏ —é–∑–µ—Ä–∞ - @{}".format(refka, user_from_worker))
                users.new_user(message.chat.id,
                               message.from_user.username, referer=refka)
                with open("baza.txt", "a", encoding="utf-8") as f:
                    f.write("@{} | @{}".format(refka, user_from_worker))

        users.close()

        try:
            # –í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            if message.from_user.id == config.admin_id:
                await bot.send_message(message.from_user.id, str(start_message_text), parse_mode='HTML', reply_markup=keyboard.keyMainAd)
            else:
                await bot.send_message(message.from_user.id, str(start_message_text), parse_mode='HTML', reply_markup=keyboard.keyMain)
        except:
            await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–≤–æ–¥–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
            txtKeyMngr = cursor_b.execute(
                "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
            await bot.send_message(message.from_user.id, 'üí¢ Error #CMNDSxSm\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))
    except:
        await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π start")
        txtKeyMngr = cursor_b.execute(
            "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
        await bot.send_message(message.from_user.id, 'üí¢ Error #CMNDSxS\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))


# –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω
@dp.message_handler(commands=['admin'])
async def admin_panel(message):
    # –£—Å–ª–æ–≤–∏–µ –¥–µ–ª–∞–µ—Ç –¥–æ—á—Ç—É–ø–Ω–æ–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
    if message.from_user.id == config.admin_id:
        # –í—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        await bot.send_message(message.from_user.id, "‚öô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                               parse_mode='HTML', reply_markup=keyboard.keyAdmin)
        await bot.send_message(message.from_user.id, "‚ùó –í–û –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–Ø–• –ú–û–ñ–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ HTML-—Ç—ç–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä <b>text</b>, <i>text</i>, <code>text</code>, <a href=\"http://\"></a>")


# –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=['text'])
async def text_answer(message):
    try:
        conn_u = sqlite3.connect('udb.sqlite3')
        cursor_u = conn_u.cursor()
        conn_i = sqlite3.connect('items.sqlite3')
        cursor_i = conn_i.cursor()
        conn_c = sqlite3.connect('categories.sqlite3')
        cursor_c = conn_c.cursor()
        conn_m = sqlite3.connect('messages.sqlite3')
        cursor_m = conn_m.cursor()
        conn_w = sqlite3.connect('wallets.sqlite3')
        cursor_w = conn_w.cursor()
        all_items = cursor_i.execute("SELECT * FROM items").fetchall()
        all_categories = cursor_c.execute(
            "SELECT * FROM categories").fetchall()

        try:
            if message.text == keyboard.txtKeyItems:
                itemMenu_message = cursor_m.execute(
                    "SELECT * FROM messages WHERE name='itemMenu_message'").fetchall()[0][1]
                itemsMiss_text = cursor_m.execute(
                    "SELECT * FROM messages WHERE name='itemsMiss_message'").fetchall()[0][1]
                keyCat = types.ReplyKeyboardMarkup(True)
                if all_categories:
                    for category in all_categories:
                        keyCat.row(str(category[0]))
                    keyCat.row(keyboard.txtKeyMainMenu)
                    await bot.send_message(message.from_user.id, str(itemMenu_message), parse_mode='HTML', reply_markup=keyCat)
                else:
                    await bot.send_message(message.from_user.id, str(itemsMiss_text), parse_mode='HTML')
        except:
            await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–≤–æ–¥–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            txtKeyMngr = cursor_b.execute(
                "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
            await bot.send_message(message.from_user.id, 'üí¢ Error #CNTxTXTctgr\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))

        try:
            if all_categories:
                for category in all_categories:
                    if message.text == category[0]:
                        category_message_text = cursor_m.execute(
                            "SELECT * FROM messages WHERE name='category_message'").fetchall()[0][1]
                        itemsMiss_text = cursor_m.execute(
                            "SELECT * FROM messages WHERE name='itemsMiss_message'").fetchall()[0][1]
                        keyItems = types.ReplyKeyboardMarkup(True)
                        all_items = cursor_i.execute(
                            "SELECT * FROM items WHERE category='{}'".format(category[0])).fetchall()
                        if all_items:
                            for item in all_items:
                                keyItems.row(str(item[1])+' | '+str(item[2]))
                            keyItems.row(keyboard.txtKeyItemsCat)
                            await bot.send_message(message.from_user.id, str(category_message_text).format(category[0]), parse_mode='HTML', reply_markup=keyItems)
                        else:
                            keyItems.row(keyboard.txtKeyItemsCat)
                            await bot.send_message(message.from_user.id, str(category_message_text).format(category[0]), parse_mode='HTML', reply_markup=keyItems)
                            await bot.send_message(message.from_user.id, str(itemsMiss_text), parse_mode='HTML')
        except:
            await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ç–æ–≤–∞—Ä–æ–≤")
            txtKeyMngr = cursor_b.execute(
                "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
            await bot.send_message(message.from_user.id, 'üí¢ Error #CNTxTXTits\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))

        try:
            if all_items:
                for item in all_items:
                    if message.text.startswith(str(item[1])+' | '+str(item[2])):
                        id_pay = uuid.uuid4()
                        cursor_u.execute("UPDATE udb SET current_item='"+str(
                            message.text.split(' | ')[0])+"' WHERE uid="+str(message.from_user.id))
                        current_price_RUB = str(message.text.split(' | ')[1])
                        cursor_u.execute("UPDATE udb SET current_price='"+str(
                            current_price_RUB[:-2])+"' WHERE uid="+str(message.from_user.id))
                        cursor_u.execute("UPDATE udb SET current_IDpay='" +
                                         str(id_pay)+"' WHERE uid="+str(message.from_user.id))
                        conn_u.commit()

                        name_wallets = str(cursor_w.execute(
                            "SELECT * FROM wallets").fetchall()[0][0])
                        chat_id = message.chat.id
                        pay_message = str(cursor_m.execute(
                            "SELECT * FROM messages WHERE name='pay_message'").fetchall()[0][1])
                        current_item = str(cursor_u.execute(
                            "SELECT * FROM udb WHERE uid='"+str(message.from_user.id)+"'").fetchall()[0][1])
                        current_price = str(cursor_u.execute(
                            "SELECT * FROM udb WHERE uid='"+str(message.from_user.id)+"'").fetchall()[0][2])
                        current_IDpay = str(cursor_u.execute(
                            "SELECT * FROM udb WHERE uid='"+str(message.from_user.id)+"'").fetchall()[0][3])
                        current_wallet = config.qiwi_number

                        conn_i = sqlite3.connect('items.sqlite3')
                        cursor_i = conn_i.cursor()
                        description_item = str(cursor_i.execute(
                            "SELECT description FROM items WHERE name='"+str(current_item)+"'").fetchall()[0][0])

                        link = functions.get_payment_link(
                            config.qiwi_number, current_price, current_IDpay)

                        keyPay = types.InlineKeyboardMarkup(row_width=1)
                        goPay = types.InlineKeyboardButton(
                            text=keyboard.txtKeyGoPay, callback_data='payment', url=link)
                        checkPay = types.InlineKeyboardButton(
                            text=keyboard.txtKeyCheckPay, callback_data='check')
                        keyPay.row(goPay)
                        keyPay.row(checkPay)
                        await bot.send_message(message.from_user.id, pay_message.format(current_item, description_item, current_wallet, current_price_RUB, current_IDpay), parse_mode='HTML', reply_markup=keyPay)
        except:
            await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–≤–æ–¥–æ–º –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞")
            txtKeyMngr = cursor_b.execute(
                "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
            await bot.send_message(message.from_user.id, 'üí¢ Error #CNTxTXTpIts\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))

        try:
            if message.text == keyboard.txtKeyTest:
                id_testPay = uuid.uuid4()
                cursor_u.execute("UPDATE udb SET current_item='" +
                                 str(message.text)+"' WHERE uid="+str(message.from_user.id))
                current_price_RUB = '1 ‚ÇΩ'
                cursor_u.execute("UPDATE udb SET current_price='" +
                                 str(1)+"' WHERE uid="+str(message.from_user.id))
                cursor_u.execute("UPDATE udb SET current_IDpay='" +
                                 str(id_testPay)+"' WHERE uid="+str(message.from_user.id))
                conn_u.commit()

                name_wallets = str(cursor_w.execute(
                    "SELECT * FROM wallets").fetchall()[0][0])
                chat_id = message.chat.id
                payTest_message = str(cursor_m.execute(
                    "SELECT * FROM messages WHERE name='payTest_message'").fetchall()[0][1])
                current_item = str(cursor_u.execute(
                    "SELECT * FROM udb WHERE uid='"+str(message.from_user.id)+"'").fetchall()[0][1])
                current_price = str(cursor_u.execute(
                    "SELECT * FROM udb WHERE uid='"+str(message.from_user.id)+"'").fetchall()[0][2])
                current_IDpay = str(cursor_u.execute(
                    "SELECT * FROM udb WHERE uid='"+str(message.from_user.id)+"'").fetchall()[0][3])
                current_wallet = config.qiwi_number

                link = functions.get_payment_link(
                    config.qiwi_number, current_price, current_IDpay)

                keyPayTest = types.InlineKeyboardMarkup(row_width=1)
                goPayTest = types.InlineKeyboardButton(
                    text=keyboard.txtKeyGoPay, callback_data='payment', url=link)
                checkPayTest = types.InlineKeyboardButton(
                    text=keyboard.txtKeyCheckPay, callback_data='check_test')
                keyPayTest.row(goPayTest)
                keyPayTest.row(checkPayTest)
                await bot.send_message(message.from_user.id, payTest_message.format(current_item, current_wallet, current_price_RUB, current_IDpay), parse_mode='HTML', reply_markup=keyPayTest)
        except:
            await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç–æ–π")
            txtKeyMngr = cursor_b.execute(
                "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
            await bot.send_message(message.from_user.id, 'üí¢ Error #CNTxTXTtstPy\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))

        try:
            if message.text == keyboard.txtKeyMainMenu:
                mainMenu_message = cursor_m.execute(
                    "SELECT * FROM messages WHERE name='mainMenu_message'").fetchall()[0][1]
                if message.from_user.id == config.admin_id:
                    await bot.send_message(message.from_user.id, str(mainMenu_message), parse_mode='HTML', reply_markup=keyboard.keyMainAd)
                else:
                    await bot.send_message(message.from_user.id, str(mainMenu_message), parse_mode='HTML', reply_markup=keyboard.keyMain)
        except:
            await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã—Ö–æ–¥–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            txtKeyMngr = cursor_b.execute(
                "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
            await bot.send_message(message.from_user.id, 'üí¢ Error #CNTxTXTm\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))

        try:
            if message.text == keyboard.txtKeyItemsCat:
                if all_categories:
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    itemMenu_message = cursor_m.execute(
                        "SELECT * FROM messages WHERE name='itemMenu_message'").fetchall()[0][1]
                    keyCat = types.ReplyKeyboardMarkup(True)

                    for category in all_categories:
                        keyCat.row(str(category[0]))
                    keyCat.row(keyboard.txtKeyMainMenu)
                    await bot.send_message(message.from_user.id, str(itemMenu_message), parse_mode='HTML', reply_markup=keyCat)
                else:
                    keyCat.row(keyboard.txtKeyItems_Miss)
                    await bot.send_message(message.from_user.id, str(itemMenu_message), parse_mode='HTML', reply_markup=keyCat)
        except:
            await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã—Ö–æ–¥–æ–º –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            txtKeyMngr = cursor_b.execute(
                "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
            await bot.send_message(message.from_user.id, 'üí¢ Error #CNTxTXTm-ctgr\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))

        try:
            if message.text == keyboard.txtKeyMngr:
                manager_message = cursor_m.execute(
                    "SELECT * FROM messages WHERE name='manager_message'").fetchall()[0][1]
                keyMngr = types.InlineKeyboardMarkup()
                txtKeyMngr = types.InlineKeyboardButton(
                    text=keyboard.txtKeySendMngr, url="t.me/{}".format(config.manager))
                keyMngr.row(txtKeyMngr)
                await bot.send_message(message.from_user.id, str(manager_message), parse_mode='HTML', reply_markup=keyMngr)
        except:
            await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–≤–æ–≤–æ–º –º–µ–Ω–µ–Ω–¥–∂–µ—Ä–∞")
            txtKeyMngr = cursor_b.execute(
                "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
            await bot.send_message(message.from_user.id, 'üí¢ Error #CNTxTXTmngr\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))

        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyAnswersAd:
                await bot.send_message(message.from_user.id, "‚úè –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                                       parse_mode='HTML', reply_markup=keyboard.keyAnswersAd)

            elif message.text == keyboard.txtKeyBtnAd:
                await bot.send_message(message.from_user.id, "‚úè –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                                       parse_mode='HTML', reply_markup=keyboard.keyBtnAd)

            elif message.text == keyboard.txtKeyCatItemAd:
                await bot.send_message(message.from_user.id, "‚úè –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                                       parse_mode='HTML', reply_markup=keyboard.keyCatItemAd)

            elif message.text == keyboard.txtKeyWalAd:
                await bot.send_message(message.from_user.id, "‚úè –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                                       parse_mode='HTML', reply_markup=keyboard.keyWalAd)

            elif message.text == keyboard.txtKeyAdminAd:
                await bot.send_message(message.from_user.id, "‚úè –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                                       parse_mode='HTML', reply_markup=keyboard.keyAdminAd)

            elif message.text == keyboard.txtKeySendAd:
                await statesGroup.Form.txtSend.set()
                await bot.send_message(message.from_user.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–æ–±—â–µ–Ω–∏—è",
                                       parse_mode='HTML', reply_markup=keyboard.keyCancel)

            elif message.text == keyboard.txtKeyBackAdmin:
                await bot.send_message(message.from_user.id, "‚öô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                                       parse_mode='HTML', reply_markup=keyboard.keyAdmin)

            elif message.text == keyboard.txtKeyOpenAdmin:
                await bot.send_message(message.from_user.id, "‚öô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                                       parse_mode='HTML', reply_markup=keyboard.keyAdmin)
                await bot.send_message(message.from_user.id, "‚ùó –í–û –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–Ø–• –ú–û–ñ–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ HTML-—Ç—ç–≥–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä <b>text</b>, <i>text</i>, <code>text</code>, <a href=\"http://\"></a>")

            elif message.text == keyboard.txtKeyStart:
                await statesGroup.Form.txtStart.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyPay:
                await statesGroup.Form.txtPay.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–ø–ª–∞—Ç—ã', reply_markup=keyboard.keyCancel, parse_mode='HTML')
                await bot.send_message(message.from_user.id, '‚ùó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{0} - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n{1} - –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n{2} - –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —ç—Ç–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n{3} - –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n{4} - –ö–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã(–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ)', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyPayTest:
                await statesGroup.Form.txtPayTest.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã', reply_markup=keyboard.keyCancel, parse_mode='HTML')
                await bot.send_message(message.from_user.id, '‚ùó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{0} - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n{1} - –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —ç—Ç–æ–π –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n{2} - –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n{3} - –ö–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã(–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ)', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyCheck:
                await statesGroup.Form.txtCheck.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –æ–ø–ª–∞—Ç—ã', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyCheckFail:
                await statesGroup.Form.txtCheckFail.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –±–µ–∑—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –æ–ø–ª–∞—Ç—ã', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyMain:
                await statesGroup.Form.txtMain.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyCatalog:
                await statesGroup.Form.txtCatalog.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyManager:
                await statesGroup.Form.txtManager.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyCat:
                await statesGroup.Form.txtCat.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=keyboard.keyCancel, parse_mode='HTML')
                await bot.send_message(message.from_user.id, '‚ùó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{0} - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyItemsMiss:
                await statesGroup.Form.txtItemsMiss.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyEdItems:
                await statesGroup.Form.txtBtnItems.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyEdTestPay:
                await statesGroup.Form.txtBtnTestPay.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyEdMngr:
                await statesGroup.Form.txtBtnMngr.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyEdMain:
                await statesGroup.Form.txtBtnMain.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —à–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyEdCatalog:
                await statesGroup.Form.txtBtnCatalog.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π –∫–∞—Ç–∞–ª–æ–≥', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyEdSendMngr:
                await statesGroup.Form.txtBtnSendMngr.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyEdGoPay:
                await statesGroup.Form.txtBtnGoPay.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyEdCheckPay:
                await statesGroup.Form.txtBtnCheckPay.set()
                await bot.send_message(message.from_user.id, 'üí¨ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã', reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyAdd:
                keyAddItem = types.ReplyKeyboardMarkup(True)
                if all_categories:
                    await statesGroup.Form.txtCatItem.set()
                    for category in all_categories:
                        keyAddItem.row(str(category[0]))
                    keyAddItem.row(keyboard.txtKeyCancel)
                    await bot.send_message(message.from_user.id, "‚úè –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", parse_mode='HTML', reply_markup=keyAddItem)
                else:
                    await bot.send_message(message.from_user.id, "üí¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç...\n–°–Ω–∞—á–∞–ª–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", parse_mode='HTML', reply_markup=keyboard.keyCatItemAd)

            elif message.text == keyboard.txtKeyDel:
                keyDelItem = types.ReplyKeyboardMarkup(True)
                if all_items:
                    await statesGroup.Form.txtDel.set()
                    for item in all_items:
                        keyDelItem.row(str(item[1]))
                    keyDelItem.row(keyboard.txtKeyCancel)
                    await bot.send_message(message.from_user.id, "‚úè –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=keyDelItem)
                else:
                    await bot.send_message(message.from_user.id, "üí¢ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç...", parse_mode='HTML', reply_markup=keyboard.keyCatItemAd)

            elif message.text == keyboard.txtKeyDelAll:
                if all_items:
                    keyDelAll = types.InlineKeyboardMarkup(row_width=2)
                    yesDelAll = types.InlineKeyboardButton(
                        '‚úî –î–∞', callback_data='delAllItems_Yes')
                    noDelAll = types.InlineKeyboardButton(
                        '‚úñ –ù–µ—Ç', callback_data='delAllItems_No')
                    keyDelAll.row(yesDelAll, noDelAll)
                    await bot.send_message(message.from_user.id, "‚úè –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã?", reply_markup=keyDelAll)
                else:
                    await bot.send_message(message.from_user.id, "üí¢ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç...", parse_mode='HTML', reply_markup=keyboard.keyCatItemAd)

            elif message.text == keyboard.txtKeyAddCat:
                await statesGroup.Form.txtAddCat.set()
                await bot.send_message(message.from_user.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", reply_markup=keyboard.keyCancel, parse_mode='HTML')

            elif message.text == keyboard.txtKeyDelCat:
                keyDelCat = types.ReplyKeyboardMarkup(True)
                if all_categories:
                    await statesGroup.Form.txtDelCat.set()
                    for category in all_categories:
                        keyDelCat.row(str(category[0]))
                    keyDelCat.row(keyboard.txtKeyCancel)
                    await bot.send_message(message.from_user.id, "‚úè –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=keyDelCat)
                else:
                    await bot.send_message(message.from_user.id, "üí¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç...", parse_mode='HTML', reply_markup=keyboard.keyCatItemAd)

            elif message.text == keyboard.txtKeyWal:
                await statesGroup.Form.txtWal.set()
                await bot.send_message(message.from_user.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä QIWI", reply_markup=keyboard.keyCancel)

            elif message.text == keyboard.txtKeyWalToken:
                await statesGroup.Form.txtWalToken.set()
                await bot.send_message(message.from_user.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ QIWI —Ç–æ–∫–µ–Ω", reply_markup=keyboard.keyCancel)

            elif message.text == keyboard.txtKeyAdminId:
                await statesGroup.Form.txtAdminId.set()
                await bot.send_message(message.from_user.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard.keyCancel)

            elif message.text == keyboard.txtKeyGroupId:
                await statesGroup.Form.txtGroupId.set()
                await bot.send_message(message.from_user.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã", reply_markup=keyboard.keyCancel)

            elif message.text == keyboard.txtKeyGroupIdDel:
                if config.group_id == 'None':
                    await bot.send_message(message.from_user.id, "‚ú® –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                else:
                    keyGroupDel = types.InlineKeyboardMarkup(row_width=2)
                    yesGroupDel = types.InlineKeyboardButton(
                        '‚úî –î–∞', callback_data='groupDel_Yes')
                    noGroupDel = types.InlineKeyboardButton(
                        '‚úñ –ù–µ—Ç', callback_data='groupDel_No')
                    keyGroupDel.row(yesGroupDel, noGroupDel)
                    await bot.send_message(message.from_user.id, "‚úè –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤ –≥—Ä—É–ø–ø—É?", reply_markup=keyGroupDel)

            elif message.text == keyboard.txtKeyMngrId:
                await statesGroup.Form.txtMngrId.set()
                await bot.send_message(message.from_user.id, "üí¨ –í–≤–µ–¥–∏—Ç–µ Username –º–µ–Ω–µ–¥–∂–µ—Ä–∞", reply_markup=keyboard.keyCancel)

            elif message.text == keyboard.txtKeyUsersAd:
                DB = functions.DataBase()
                users = DB.get_all_users()
                DB.close()

                for mes in users:
                    await bot.send_message(message.chat.id, mes)
    except:
        await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è")
        txtKeyMngr = cursor_b.execute(
            "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
        await bot.send_message(message.from_user.id, 'üí¢ Error #CNTxTXT\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(state=statesGroup.Form.txtSend)
async def start_message_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAdmin)
            else:
                async with state.proxy() as data:
                    data['txtSend'] = message.text
                    txtSend = data['txtSend']
                    DB = functions.DataBase()
                    users = DB.get_chat_id_users()
                    DB.close()
                    for mesId in users:
                        await bot.send_message(mesId, str(txtSend), parse_mode='HTML')
                    await bot.send_message(message.from_user.id, '‚ú® –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã', reply_markup=keyboard.keyAdmin)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(state=statesGroup.Form.txtStart)
async def start_message_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAnswersAd)
            else:
                async with state.proxy() as data:
                    data['txtStart'] = message.text
                    txtStart = data['txtStart']
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    cursor_m.execute("UPDATE messages SET message_text='" +
                                     str(txtStart)+"' WHERE name='start_message'")
                    conn_m.commit()
                    await bot.send_message(message.from_user.id,
                                           '‚ú® –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyAnswersAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(state=statesGroup.Form.txtPay)
async def pay_message_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAnswersAd)
            else:
                async with state.proxy() as data:
                    data['txtPay'] = message.text
                    txtPay = data['txtPay']
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    cursor_m.execute(
                        "UPDATE messages SET message_text='"+str(txtPay)+"' WHERE name='pay_message'")
                    conn_m.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyAnswersAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –æ–ø–ª–∞—Ç—ã')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
@dp.message_handler(state=statesGroup.Form.txtPayTest)
async def payTest_message_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAnswersAd)
            else:
                async with state.proxy() as data:
                    data['txtPayTest'] = message.text
                    txtPayTest = data['txtPayTest']
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    cursor_m.execute("UPDATE messages SET message_text='" +
                                     str(txtPayTest)+"' WHERE name='payTest_message'")
                    conn_m.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyAnswersAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –£–°–ü–ï–®–ù–û–ô –æ–ø–ª–∞—Ç—ã
@dp.message_handler(state=statesGroup.Form.txtCheck)
async def check_message_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAnswersAd)
            else:
                async with state.proxy() as data:
                    data['txtCheck'] = message.text
                    txtCheck = data['txtCheck']
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    cursor_m.execute(
                        "UPDATE messages SET message_text='"+str(txtCheck)+"' WHERE name='check_message'")
                    conn_m.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyAnswersAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ù–ï–£–î–ê–ß–ù–û–ô –æ–ø–ª–∞—Ç—ã
@dp.message_handler(state=statesGroup.Form.txtCheckFail)
async def check_fail_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAnswersAd)
            else:
                async with state.proxy() as data:
                    data['txtCheckFail'] = message.text
                    txtCheckFail = data['txtCheckFail']
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    cursor_m.execute("UPDATE messages SET message_text='" +
                                     str(txtCheckFail)+"' WHERE name='check_fail_message'")
                    conn_m.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyAnswersAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(state=statesGroup.Form.txtMain)
async def back_message_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAnswersAd)
            else:
                async with state.proxy() as data:
                    data['txtMain'] = message.text
                    txtMain = data['txtMain']
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    cursor_m.execute("UPDATE messages SET message_text='" +
                                     str(txtMain)+"' WHERE name='mainMenu_message'")
                    conn_m.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyAnswersAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
@dp.message_handler(state=statesGroup.Form.txtCatalog)
async def back_message_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAnswersAd)
            else:
                async with state.proxy() as data:
                    data['txtCatalog'] = message.text
                    txtCatalog = data['txtCatalog']
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    cursor_m.execute("UPDATE messages SET message_text='" +
                                     str(txtCatalog)+"' WHERE name='itemMenu_message'")
                    conn_m.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ö–æ–¥–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyAnswersAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞—Ç–∞–ª–æ–≥')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@dp.message_handler(state=statesGroup.Form.txtManager)
async def back_message_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAnswersAd)
            else:
                async with state.proxy() as data:
                    data['txtManager'] = message.text
                    txtManager = data['txtManager']
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    cursor_m.execute("UPDATE messages SET message_text='" +
                                     str(txtManager)+"' WHERE name='manager_message'")
                    conn_m.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyAnswersAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(state=statesGroup.Form.txtCat)
async def category_message_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAnswersAd)
            else:
                async with state.proxy() as data:
                    data['txtCat'] = message.text
                    txtCat = data['txtCat']
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    cursor_m.execute("UPDATE messages SET message_text='" +
                                     str(txtCat)+"' WHERE name='category_message'")
                    conn_m.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyAnswersAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(state=statesGroup.Form.txtItemsMiss)
async def itemsMiss_message_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAnswersAd)
            else:
                async with state.proxy() as data:
                    data['txtItemsMiss'] = message.text
                    txtItemsMiss = data['txtItemsMiss']
                    conn_m = sqlite3.connect('messages.sqlite3')
                    cursor_m = conn_m.cursor()
                    cursor_m.execute("UPDATE messages SET message_text='" +
                                     str(txtItemsMiss)+"' WHERE name='itemsMiss_message'")
                    conn_m.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyAnswersAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(state=statesGroup.Form.txtBtnItems)
async def items_button_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyBtnAd)
            else:
                async with state.proxy() as data:
                    data['txtBtnItems'] = message.text
                    txtBtnItems = data['txtBtnItems']
                    conn_b = sqlite3.connect('buttons.sqlite3')
                    cursor_b = conn_b.cursor()
                    cursor_b.execute(
                        "UPDATE buttons SET button_text='"+str(txtBtnItems)+"' WHERE button='items'")
                    conn_b.commit()

                    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    keyMain = types.ReplyKeyboardMarkup(True)
                    txtKeyItems = str(cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='items'").fetchall()[0][1])
                    txtKeyMngr = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
                    txtKeyTest = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='testPay'").fetchall()[0][1]

                    keyboard.txtKeyItems = txtKeyItems
                    keyboard.txtKeyMngr = txtKeyMngr
                    keyboard.txtKeyTest = txtKeyTest

                    keyMain.row(txtKeyItems)
                    keyMain.row(txtKeyMngr)
                    keyMain.row(txtKeyTest)

                    keyboard.keyMain = keyMain

                    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    keyMainAd = types.ReplyKeyboardMarkup(True)
                    keyMainAd.row(txtKeyItems)
                    keyMainAd.row(txtKeyMngr)
                    keyMainAd.row(txtKeyTest)
                    keyMainAd.row(keyboard.txtKeyOpenAdmin)

                    keyboard.keyMainAd = keyMainAd
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyBtnAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
@dp.message_handler(state=statesGroup.Form.txtBtnTestPay)
async def items_button_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyBtnAd)
            else:
                async with state.proxy() as data:
                    data['txtBtnTestPay'] = message.text
                    txtBtnTestPay = data['txtBtnTestPay']
                    conn_b = sqlite3.connect('buttons.sqlite3')
                    cursor_b = conn_b.cursor()
                    cursor_b.execute(
                        "UPDATE buttons SET button_text='"+str(txtBtnTestPay)+"' WHERE button='testPay'")
                    conn_b.commit()

                    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    keyMain = types.ReplyKeyboardMarkup(True)
                    txtKeyItems = str(cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='items'").fetchall()[0][1])
                    txtKeyMngr = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
                    txtKeyTest = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='testPay'").fetchall()[0][1]

                    keyboard.txtKeyItems = txtKeyItems
                    keyboard.txtKeyMngr = txtKeyMngr
                    keyboard.txtKeyTest = txtKeyTest

                    keyMain.row(txtKeyItems)
                    keyMain.row(txtKeyMngr)
                    keyMain.row(txtKeyTest)

                    keyboard.keyMain = keyMain

                    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    keyMainAd = types.ReplyKeyboardMarkup(True)
                    keyMainAd.row(txtKeyItems)
                    keyMainAd.row(txtKeyMngr)
                    keyMainAd.row(txtKeyTest)
                    keyMainAd.row(keyboard.txtKeyOpenAdmin)

                    keyboard.keyMainAd = keyMainAd
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyBtnAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@dp.message_handler(state=statesGroup.Form.txtBtnMngr)
async def mngr_button_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyBtnAd)
            else:
                async with state.proxy() as data:
                    data['txtBtnMngr'] = message.text
                    txtBtnMngr = data['txtBtnMngr']
                    conn_b = sqlite3.connect('buttons.sqlite3')
                    cursor_b = conn_b.cursor()
                    cursor_b.execute(
                        "UPDATE buttons SET button_text='"+str(txtBtnMngr)+"' WHERE button='manager'")
                    conn_b.commit()

                    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                    keyMain = types.ReplyKeyboardMarkup(True)
                    txtKeyItems = str(cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='items'").fetchall()[0][1])
                    txtKeyMngr = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
                    txtKeyTest = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='testPay'").fetchall()[0][1]

                    keyboard.txtKeyItems = txtKeyItems
                    keyboard.txtKeyMngr = txtKeyMngr
                    keyboard.txtKeyTest = txtKeyTest

                    keyMain.row(txtKeyItems)
                    keyMain.row(txtKeyMngr)
                    keyMain.row(txtKeyTest)

                    keyboard.keyMain = keyMain

                    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    keyMainAd = types.ReplyKeyboardMarkup(True)
                    keyMainAd.row(txtKeyItems)
                    keyMainAd.row(txtKeyMngr)
                    keyMainAd.row(txtKeyTest)
                    keyMainAd.row(keyboard.txtKeyOpenAdmin)

                    keyboard.keyMainAd = keyMainAd
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyBtnAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler(state=statesGroup.Form.txtBtnMain)
async def main_button_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyBtnAd)
            else:
                async with state.proxy() as data:
                    data['txtBtnMain'] = message.text
                    txtBtnMain = data['txtBtnMain']
                    conn_b = sqlite3.connect('buttons.sqlite3')
                    cursor_b = conn_b.cursor()
                    cursor_b.execute(
                        "UPDATE buttons SET button_text='"+str(txtBtnMain)+"' WHERE button='main'")
                    conn_b.commit()

                    txtKeyMainMenu = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='main'").fetchall()[0][1]

                    # –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    keyAdmin = types.ReplyKeyboardMarkup(True)
                    txtKeySendAd = keyboard.txtKeySendAd
                    txtKeyAnswersAd = keyboard.txtKeyAnswersAd
                    txtKeyBtnAd = keyboard.txtKeyBtnAd
                    txtKeyCatItemAd = keyboard.txtKeyCatItemAd
                    txtKeyWalAd = keyboard.txtKeyWalAd
                    txtKeyAdminAd = keyboard.txtKeyAdminAd
                    txtKeyUsersAd = keyboard.txtKeyUsersAd

                    keyboard.txtKeyMainMenu = txtKeyMainMenu

                    keyAdmin.row(txtKeySendAd)
                    keyAdmin.row(txtKeyAnswersAd)
                    keyAdmin.row(txtKeyBtnAd)
                    keyAdmin.row(txtKeyCatItemAd)
                    keyAdmin.row(txtKeyWalAd)
                    keyAdmin.row(txtKeyAdminAd)
                    keyAdmin.row(txtKeyUsersAd)
                    keyAdmin.row(txtKeyMainMenu)

                    keyboard.keyAdmin = keyAdmin
                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyBtnAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
@dp.message_handler(state=statesGroup.Form.txtBtnCatalog)
async def catalog_button_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyBtnAd)
            else:
                async with state.proxy() as data:
                    data['txtBtnCatalog'] = message.text
                    txtBtnCatalog = data['txtBtnCatalog']
                    conn_b = sqlite3.connect('buttons.sqlite3')
                    cursor_b = conn_b.cursor()
                    cursor_b.execute(
                        "UPDATE buttons SET button_text='"+str(txtBtnCatalog)+"' WHERE button='catalog'")
                    conn_b.commit()

                    txtKeyItemsCat = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='catalog'").fetchall()[0][1]
                    keyboard.txtKeyItemsCat = txtKeyItemsCat

                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyBtnAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
@dp.message_handler(state=statesGroup.Form.txtBtnSendMngr)
async def sendMngr_button_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyBtnAd)
            else:
                async with state.proxy() as data:
                    data['txtBtnSendMngr'] = message.text
                    txtBtnSendMngr = data['txtBtnSendMngr']
                    conn_b = sqlite3.connect('buttons.sqlite3')
                    cursor_b = conn_b.cursor()
                    cursor_b.execute("UPDATE buttons SET button_text='" +
                                     str(txtBtnSendMngr)+"' WHERE button='sendMngr'")
                    conn_b.commit()

                    txtKeySendMngr = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='sendMngr'").fetchall()[0][1]
                    keyboard.txtKeySendMngr = txtKeySendMngr

                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyBtnAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
@dp.message_handler(state=statesGroup.Form.txtBtnGoPay)
async def goPay_button_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyBtnAd)
            else:
                async with state.proxy() as data:
                    data['txtBtnGoPay'] = message.text
                    txtBtnGoPay = data['txtBtnGoPay']
                    conn_b = sqlite3.connect('buttons.sqlite3')
                    cursor_b = conn_b.cursor()
                    cursor_b.execute(
                        "UPDATE buttons SET button_text='"+str(txtBtnGoPay)+"' WHERE button='goPay'")
                    conn_b.commit()

                    txtKeyGoPay = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='goPay'").fetchall()[0][1]
                    keyboard.txtKeyGoPay = txtKeyGoPay

                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyBtnAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ')


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
@dp.message_handler(state=statesGroup.Form.txtBtnCheckPay)
async def checkPay_button_edit(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyBtnAd)
            else:
                async with state.proxy() as data:
                    data['txtBtnCheckPay'] = message.text
                    txtBtnCheckPay = data['txtBtnCheckPay']
                    conn_b = sqlite3.connect('buttons.sqlite3')
                    cursor_b = conn_b.cursor()
                    cursor_b.execute("UPDATE buttons SET button_text='" +
                                     str(txtBtnCheckPay)+"' WHERE button='checkPay'")
                    conn_b.commit()

                    txtKeyCheckPay = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='checkPay'").fetchall()[0][1]
                    keyboard.txtKeyCheckPay = txtKeyCheckPay

                    await bot.send_message(message.from_user.id, '‚ú® –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –∏–∑–º–µ–Ω–µ–Ω', reply_markup=keyboard.keyBtnAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã')


# –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=statesGroup.Form.txtCatItem)
async def process_category(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            conn_c = sqlite3.connect('categories.sqlite3')
            cursor_c = conn_c.cursor()
            all_categories = cursor_c.execute(
                "SELECT * FROM categories").fetchall()
            if all_categories:
                for category in all_categories:
                    if message.text == category[0]:
                        async with state.proxy() as data:
                            data['txtCatItem'] = message.text
                        await statesGroup.Form.next()
                        await bot.send_message(message.from_user.id, '‚ú® –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ', reply_markup=keyboard.keyCancel)
                    elif message.text == keyboard.txtKeyCancel:
                        await state.finish()
                        await bot.send_message(message.from_user.id,
                                               'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyCatItemAd)
                    elif message.text != category[0] or keyboard.txtKeyCancel:
                        await bot.send_message(message.from_user.id, 'üí¢ –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç!')
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')


# –ü—Ä–æ–º–µ–∂—É—Ç–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(state=statesGroup.Form.txtDesItem)
async def process_category(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyCatItemAd)
            else:
                async with state.proxy() as data:
                    data['txtDesItem'] = message.text
                await statesGroup.Form.next()
                await bot.send_message(message.from_user.id, '‚ú® –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é —Å–∏–º–≤–æ–ª–æ–º |', reply_markup=keyboard.keyCancel)
                await bot.send_message(message.from_user.id, '‚ùó –í–ê–ñ–ù–û\n–¶–µ–Ω—É –≤–≤–æ–¥–∏—Ç—å –ë–ï–ó –∑–Ω–∞–∫–∞ ‚ÇΩ', reply_markup=keyboard.keyCancel)
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')


# –î–æ–±–æ–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä
@dp.message_handler(state=statesGroup.Form.txtAdd)
async def add_item(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyCatItemAd)
            else:
                async with state.proxy() as data:
                    data['txtAdd'] = message.text
                    txtAdd = data['txtAdd']
                    txtCatItem = data['txtCatItem']
                    txtDesItem = data['txtDesItem']
                    conn_i = sqlite3.connect('items.sqlite3')
                    cursor_i = conn_i.cursor()
                    all_items = cursor_i.execute(
                        "SELECT name FROM items").fetchall()
                    if all_items:
                        for items in all_items:
                            items = items[0]
                        if items == str(txtAdd.split(' | ')[0]):
                            await bot.send_message(message.from_user.id, 'üí¢ –¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                        else:
                            cursor_i.execute("INSERT INTO items VALUES ('"+str(random.randint(111111, 999999))+"', '"+str(txtAdd.split(
                                ' | ')[0])+"', '"+str(txtAdd.split(' | ')[1]+' ‚ÇΩ')+"', '"+str(txtCatItem)+"', '"+str(txtDesItem)+"')")
                            conn_i.commit()
                            await bot.send_message(message.from_user.id, '‚ú® –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=keyboard.keyCatItemAd)
                            await state.finish()
                    else:
                        cursor_i.execute("INSERT INTO items VALUES ('"+str(random.randint(111111, 999999))+"', '"+str(txtAdd.split(
                            ' | ')[0])+"', '"+str(txtAdd.split(' | ')[1]+' ‚ÇΩ')+"', '"+str(txtCatItem)+"', '"+str(txtDesItem)+"')")
                        conn_i.commit()
                        await bot.send_message(message.from_user.id, '‚ú® –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=keyboard.keyCatItemAd)
                        await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')


# –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä
@dp.message_handler(state=statesGroup.Form.txtDel)
async def del_item(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyCatItemAd)
            else:
                async with state.proxy() as data:
                    data['txtDel'] = message.text
                    txtDel = data['txtDel']
                    conn_i = sqlite3.connect('items.sqlite3')
                    cursor_i = conn_i.cursor()
                    cursor_i.execute(
                        "DELETE FROM items WHERE name='"+str(txtDel)+"'")
                    conn_i.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω', reply_markup=keyboard.keyCatItemAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')


# –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.message_handler(state=statesGroup.Form.txtAddCat)
async def add_item(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyCatItemAd)
            else:
                async with state.proxy() as data:
                    data['txtAddCat'] = message.text
                    txtAddCat = data['txtAddCat']

                    conn_c = sqlite3.connect('categories.sqlite3')
                    cursor_c = conn_c.cursor()
                    all_categories = cursor_c.execute(
                        "SELECT * FROM categories").fetchall()
                    if all_categories:
                        for category in all_categories:
                            category = category[0]
                        if category == txtAddCat:
                            await bot.send_message(message.from_user.id, 'üí¢ –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                        else:
                            conn_c = sqlite3.connect('categories.sqlite3')
                            cursor_c = conn_c.cursor()
                            cursor_c.execute(
                                "INSERT INTO categories VALUES ('"+str(txtAddCat)+"')")
                            conn_c.commit()
                            await bot.send_message(message.from_user.id, '‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=keyboard.keyCatItemAd)
                            await state.finish()
                    else:
                        conn_c = sqlite3.connect('categories.sqlite3')
                        cursor_c = conn_c.cursor()
                        cursor_c.execute(
                            "INSERT INTO categories VALUES ('"+str(txtAddCat)+"')")
                        conn_c.commit()
                        await bot.send_message(message.from_user.id, '‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=keyboard.keyCatItemAd)
                        await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')


# –£–¥–∞–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é
@dp.message_handler(state=statesGroup.Form.txtDelCat)
async def del_item(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyCatItemAd)
            else:
                async with state.proxy() as data:
                    data['txtDelCat'] = message.text
                    txtDelCat = data['txtDelCat']
                    conn_c = sqlite3.connect('categories.sqlite3')
                    cursor_c = conn_c.cursor()
                    cursor_c.execute(
                        "DELETE FROM categories WHERE category='"+str(txtDelCat)+"'")
                    conn_c.commit()

                    conn_i = sqlite3.connect('items.sqlite3')
                    cursor_i = conn_i.cursor()
                    cursor_i.execute(
                        "DELETE FROM items WHERE category='"+str(txtDelCat)+"'")
                    conn_i.commit()
                    await bot.send_message(message.from_user.id, '‚ú® –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞', reply_markup=keyboard.keyCatItemAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')


# –ò–∑–º–µ–Ω—è–µ—Ç –Ω–æ–º–µ—Ä –ø–ª–∞—Ç–µ–∂–∞
@dp.message_handler(state=statesGroup.Form.txtWal)
async def update_wallet(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyWalAd)
            else:
                async with state.proxy() as data:
                    data['txtWal'] = message.text
                    txtWal = data['txtWal']
                    conn_w = sqlite3.connect('wallets.sqlite3')
                    cursor_w = conn_w.cursor()
                    cursor_w.execute(
                        "UPDATE wallets SET acc_number=('"+str(txtWal)+"')")
                    conn_w.commit()
                    config.qiwi_number = str(cursor_w.execute(
                        "SELECT * FROM wallets").fetchall()[0][0])
                    await bot.send_message(message.from_user.id, '‚ú® –ö–æ—à–µ–ª–µ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=keyboard.keyWalAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ QIWI')


# –ò–∑–º–µ–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω QIWI
@dp.message_handler(state=statesGroup.Form.txtWalToken)
async def update_wallet_token(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyWalAd)
            else:
                async with state.proxy() as data:
                    data['txtWalToken'] = message.text
                    txtWalToken = data['txtWalToken']
                    conn_w = sqlite3.connect('wallets.sqlite3')
                    cursor_w = conn_w.cursor()
                    cursor_w.execute(
                        "UPDATE wallets SET token=('"+str(txtWalToken)+"')")
                    conn_w.commit()
                    config.qiwi_token = str(cursor_w.execute(
                        "SELECT * FROM wallets").fetchall()[0][1])
                    await bot.send_message(message.from_user.id, '‚ú® –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=keyboard.keyWalAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ QIWI')


# –ò–∑–º–µ–Ω—è–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(state=statesGroup.Form.txtAdminId)
async def update_wallet_token(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAdminAd)
            else:
                async with state.proxy() as data:
                    data['txtAdminId'] = message.text
                    txtAdminId = data['txtAdminId']
                    conn_a = sqlite3.connect('admin.sqlite3')
                    cursor_a = conn_a.cursor()
                    cursor_a.execute(
                        "UPDATE admin SET value=('"+str(txtAdminId)+"') WHERE name='admin_id'")
                    conn_a.commit()
                    config.admin_id = int(cursor_a.execute(
                        "SELECT * FROM admin WHERE name='admin_id'").fetchall()[0][1])
                    await bot.send_message(message.from_user.id, '‚ú® ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=keyboard.keyMain)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')


# –ò–∑–º–µ–Ω—è–µ—Ç ID –≥—Ä—É–ø–ø—ã
@dp.message_handler(state=statesGroup.Form.txtGroupId)
async def update_wallet_token(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAdminAd)
            else:
                async with state.proxy() as data:
                    data['txtGroupId'] = message.text
                    txtGroupId = data['txtGroupId']
                    conn_a = sqlite3.connect('admin.sqlite3')
                    cursor_a = conn_a.cursor()
                    cursor_a.execute(
                        "UPDATE admin SET value=('"+str(txtGroupId)+"') WHERE name='group_id'")
                    conn_a.commit()
                    config.group_id = str(cursor_a.execute(
                        "SELECT * FROM admin WHERE name='group_id'").fetchall()[0][1])
                    await bot.send_message(message.from_user.id, '‚ú® –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É –≤–∫–ª—é—á–µ–Ω–∞', reply_markup=keyboard.keyAdminAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ ID –≥—Ä—É–ø–ø—ã')


# –ò–∑–º–µ–Ω—è–µ—Ç username –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@dp.message_handler(state=statesGroup.Form.txtMngrId)
async def update_wallet_token(message, state: FSMContext):
    try:
        if message.from_user.id == config.admin_id:
            if message.text == keyboard.txtKeyCancel:
                await state.finish()
                await bot.send_message(message.from_user.id,
                                       'üí§ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard.keyAdminAd)
            else:
                async with state.proxy() as data:
                    data['txtMngrId'] = message.text
                    txtMngrId = data['txtMngrId']
                    conn_a = sqlite3.connect('admin.sqlite3')
                    cursor_a = conn_a.cursor()
                    cursor_a.execute(
                        "UPDATE admin SET value=('"+str(txtMngrId)+"') WHERE name='manager'")
                    conn_a.commit()
                    config.manager = str(cursor_a.execute(
                        "SELECT * FROM admin WHERE name='manager'").fetchall()[0][1])
                    await bot.send_message(message.from_user.id, '‚ú® Usermane –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=keyboard.keyAdminAd)
                await state.finish()
    except:
        await bot.send_message(message.from_user.id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ username –º–µ–Ω–µ–¥–∂–µ—Ä–∞')


# –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Call
@dp.callback_query_handler(lambda call: True)
async def del_all_items(call):
    try:
        conn_u = sqlite3.connect('udb.sqlite3')
        cursor_u = conn_u.cursor()

        chat_id = call.from_user.id
        # –£–¥–∞–ª—è–µ—Ç –í–°–ï —Ç–æ–≤–∞—Ä—ã
        try:
            if call.data == 'delAllItems_Yes':
                conn_i = sqlite3.connect('items.sqlite3')
                cursor_i = conn_i.cursor()
                all_items = cursor_i.execute("SELECT * FROM items").fetchall()
                if all_items:
                    for item in all_items:
                        cursor_i.execute(
                            "DELETE FROM items WHERE index_item='"+str(item[0])+"'")
                        conn_i.commit()
                    await bot.send_message(chat_id, '‚ú® –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã')
            # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤
            elif call.data == 'delAllItems_No':
                await bot.send_message(chat_id, '‚ú® –¢–æ–≤–∞—Ä—ã –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã')
        except:
            await bot.send_message(chat_id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤')

        try:
            # –û—Ç–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤ –≥—Ä—É–ø–ø—É
            if call.data == 'groupDel_Yes':
                conn_a = sqlite3.connect('admin.sqlite3')
                cursor_a = conn_a.cursor()
                cursor_a.execute(
                    "UPDATE admin SET value=('"+str('None')+"') WHERE name='group_id'")
                conn_a.commit()
                config.group_id = str(cursor_a.execute(
                    "SELECT * FROM admin WHERE name='group_id'").fetchall()[0][1])
                await bot.send_message(chat_id, '‚ú® –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É –æ—Ç–∫–ª—é—á–µ–Ω–∞')
            # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –í–°–ï–• —Ç–æ–≤–∞—Ä–æ–≤
            elif call.data == 'groupDel_No':
                await bot.send_message(chat_id, '‚ú® –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—É –æ—Ç—Å—Ç–∞–µ—Ç—Å—è')
        except:
            await bot.send_message(chat_id, 'üí¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø—É')

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
            if call.data == "check":
                try:
                    last_payment = functions.get_last_pay(
                        config.qiwi_number, config.qiwi_token)
                except:
                    await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ —Ç–æ–∫–µ–Ω–æ–º QIWI")
                    txtKeyMngr = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
                    await bot.send_message(message.from_user.id, 'üí¢ Error #CLLxLP\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))

                conn_m = sqlite3.connect('messages.sqlite3')
                cursor_m = conn_m.cursor()

                current_price = str(cursor_u.execute(
                    "SELECT * FROM udb WHERE uid='"+str(chat_id)+"'").fetchall()[0][2])
                current_IDpay = str(cursor_u.execute(
                    "SELECT * FROM udb WHERE uid='"+str(chat_id)+"'").fetchall()[0][3])

                # –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞
                qiwiSum = str(last_payment["sum"])
                qiwiCom = str(last_payment["description"])
                if str(qiwiSum) == str(current_price) and str(qiwiCom) == str(current_IDpay):
                    check_message = str(cursor_m.execute(
                        "SELECT * FROM messages WHERE name='check_message'").fetchall()[0][1])
                    await bot.send_message(chat_id, check_message.format(), parse_mode="HTML")
                    await send_in_group("üí∏ –ü–æ–ª—É—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ - {}—Ä –æ—Ç —é–∑–µ—Ä–∞ @{} —Å chat_id {}".format(qiwiSum, call.message.chat.username, chat_id))

                    users = functions.DataBase()
                    users.pay(chat_id, qiwiSum)
                    users.close()
                    cursor_u.execute(
                        "DELETE FROM udb WHERE uid='"+str(chat_id)+"'")
                    cursor_u.execute(
                        "INSERT INTO udb VALUES ('"+str(chat_id)+"', 'none', 'none', 'none')")
                    conn_u.commit()

                # –û–ø–ª–∞—Ç—ã –Ω–µ—Ç
                else:
                    check_fail_message = str(cursor_m.execute(
                        "SELECT * FROM messages WHERE name='check_fail_message'").fetchall()[0][1])
                    await bot.send_message(chat_id, check_fail_message.format(), parse_mode="HTML")
        except:
            await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–ø–ª–∞—Ç—ã")
            txtKeyMngr = cursor_b.execute(
                "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
            await bot.send_message(message.from_user.id, 'üí¢ Error #CLLxCHK\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã
        try:
            if call.data == "check_test":
                try:
                    last_payment = functions.get_last_pay(
                        config.qiwi_number, config.qiwi_token)
                except:
                    await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ —Ç–æ–∫–µ–Ω–æ–º QIWI")
                    txtKeyMngr = cursor_b.execute(
                        "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
                    await bot.send_message(message.from_user.id, 'üí¢ Error #CLLxLP\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))

                current_price = str(cursor_u.execute(
                    "SELECT * FROM udb WHERE uid='"+str(chat_id)+"'").fetchall()[0][2])
                current_IDpay = str(cursor_u.execute(
                    "SELECT * FROM udb WHERE uid='"+str(chat_id)+"'").fetchall()[0][3])

                # –ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞
                qiwiSum = "1"
                qiwiCom = str(last_payment["description"])
                if str(qiwiSum) == str(current_price) and str(qiwiCom) == str(current_IDpay):
                    check_message = str(cursor_m.execute(
                        "SELECT * FROM messages WHERE name='check_message'").fetchall()[0][1])
                    await bot.send_message(chat_id, check_message.format(), parse_mode="HTML")
                    await send_in_group("üí∏ –ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ - {}—Ä –æ—Ç —é–∑–µ—Ä–∞ @{} —Å chat_id {}".format(qiwiSum, call.message.chat.username, chat_id))

                    users = functions.DataBase()
                    users.pay(chat_id, qiwiSum)
                    users.close()
                    cursor_u.execute(
                        "DELETE FROM udb WHERE uid='"+str(chat_id)+"'")
                    cursor_u.execute(
                        "INSERT INTO udb VALUES ('"+str(chat_id)+"', 'none', 'none', 'none')")
                    conn_u.commit()

                # –ù–µ –ø–æ–ª—É—á–µ–Ω–∞
                else:
                    check_fail_message = str(cursor_m.execute(
                        "SELECT * FROM messages WHERE name='check_fail_message'").fetchall()[0][1])
                    await bot.send_message(chat_id, check_fail_message.format(), parse_mode="HTML")
        except:
            await send_in_group("üí¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã")
            txtKeyMngr = cursor_b.execute(
                "SELECT * FROM buttons WHERE button='manager'").fetchall()[0][1]
            await bot.send_message(message.from_user.id, 'üí¢ Error #CLLxCHKtst\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "{}"'.format(txtKeyMngr))
    except:
        await bot.send_message(chat_id, 'üí¢ –û—à–∏–±–∫–∞ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ call')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
